name: Container Build and Trigger Deploy ## comment
on:
  push:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Trigger Deployment'
        requiered: true
        default: 'false'

env:
  CODE_SRC_FOLDER: tracktor
  REGISTRY: mazenatefdevk8sk8sreg42h.azurecr.io
  REPOSITORY: tracktor
  USER: ${{ secrets.AZURE_CLIENT_ID }}
  SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  TENANT: ${{ secrets.AZURE_CLIENT_TENANT }}
  #DEV_PAYLOAD: '{"value_file": "./helm/values-dev.yaml","cluster": "mazen-atef-dev-k8s-cluster-main-x0l6","resource_group": "mazen-atef-dev-k8s-rg-51gx","release": "tracktor","namespace": "default","timeout": "10m"}'
  #PROD_PAYLOAD: '{"value_file": "./helm/values-prod.yaml","cluster": "mazen-atef-dev-k8s-cluster-main-x0l6","resource_group": "mazen-atef-dev-k8s-rg-51gx","release": "tracktor","namespace": "prod","timeout": "10m"}'
jobs:

  test:
    name: Test Tracktor
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0

  deploy:
    name: Build and Deploy Tracktor
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with: 
          fetch-depth: 0

      - name: Prepare SSH-Keys
        uses: shimataro/ssh-key-action@v2.0.3
        with:
          key: ${{ secrets.CROSS_PULL_GIT_ACTIONS }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Set  Image Name and Tag 
        id : image
        run: |
          echo "IMAGE_NAME=$(echo ${REGISTRY}/${REPOSITORY})" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(echo ${GITHUB_SHA:1:7})" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_TAG::$(echo ${GITHUB_SHA:1:7})"
      # step to check .. to be removed.

      - name: Azure Login (prod subscription) where ACR 
        run: |
          az login --service-principal -u ${USER} -p ${SECRET} --tenant ${TENANT}
          az account set --subscription="012901f9-e5ca-44a8-b241-f4a383710f91"
      
      - name : List all tags in the ACR
        id : tags
        run : |
          echo "::set-output name=TAGS::$(echo $(az acr repository show-tags --name ${REGISTRY} --repository ${REPOSITORY}))"
         

      - name : Build Image if it doesn't exist in ACR  
        if: ${{!contains(steps.tags.outputs.TAGS, steps.image.outputs.IMAGE_TAG)}}
        run: |
          bash .github/scripts/docker_build_and_push.sh
        
      - name: Generate Payload
        id: set-post-options
        env:
          PROD: ${{ endsWith(github.ref, '/main') }}
        run: |
          echo "::set-output name=environment::$(if ${PROD}; then echo 'production'; else echo 'testing'; fi)"
      - name: Create Deployment
        id : deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          #mediaType: |
          #  previews:
          #    - flash
          environment: ${{ steps.set-post-options.outputs.environment }}
          auto_merge: false
          required_contexts: '["Test Tracktor"]'
          description: Automatic deployment triggered from Pipeline
        env:
          GITHUB_TOKEN:  ${{ secrets.SERVICE_USER_GITHUB_TOKEN }}
      
      - name: Set Deployment Status to in_progress
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment_id/statuses
          repository: ${{ github.repository }}
          deployment_id: ${{ fromJson(steps.deployment.outputs.data).id }}
          #mediaType: |
          #  previews:
          #    - flash
          environment: ${{ steps.set-post-options.outputs.environment }}
          state: in_progress
          description: Started Deployment Pipeline
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: AKS Login (dev)
        if : ${{ endsWith(github.ref, '/dev') }}
        env : 
          RESOURCE_GROUP: mazen-atef-dev-k8s-rg-51gx
          CLUSTER: mazen-atef-dev-k8s-cluster-main-x0l6
        run: |
          az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${CLUSTER}

      - name: AKS Login (PROD)
        if : ${{ endsWith(github.ref, '/main') }}
        env : 
          RESOURCE_GROUP: mazen-atef-dev-k8s-rg-51gx
          CLUSTER: mazen-atef-dev-k8s-cluster-main-x0l6
        run: |
          az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${CLUSTER}
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Install helm
        uses: azure/setup-helm@v1

      - name: Deploy to Dev cluster
        if : ${{ endsWith(github.ref, '/dev') }}
        env : 
          VALUE_FILE: ./helm/values-dev.yaml
          NAMESPACE: dev
          RELEASE: tracktor
        run: |
          helm upgrade --install --atomic --timeout 10m \
            -f ${VALUE_FILE} \
            --set image.repository=${IMAGE_NAME},image.tag=${IMAGE_TAG} \
            --namespace ${NAMESPACE} --create-namespace ${RELEASE} ./helm/tracktor

      - name: Deploy to Prod cluster 
        if : ${{ endsWith(github.ref, '/main') }}
        env : 
          VALUE_FILE: ./helm/values-prod.yaml
          NAMESPACE: prod
          RELEASE:  tracktor
        run: |
          helm upgrade --install --atomic --timeout ${TIMEOUT} \
            -f ${VALUE_FILE} \
            --set image.repository=${IMAGE_NAME},image.tag=${IMAGE_TAG} \
            --namespace ${NAMESPACE} --create-namespace ${RELEASE} ./helm/tracktor

      - name: Set Deployment Status to success
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment_id/statuses
          repository: ${{ github.repository }}
          deployment_id: ${{ fromJson(steps.deployment.outputs.data).id }}
          environment: ${{ steps.set-post-options.outputs.environment }}
          state: success
          description: Deployment finished succesfully
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Deployment Status to failure
        uses: octokit/request-action@v2.x
        if: ${{ failure() }}
        with:
          route: POST /repos/:repository/deployments/:deployment_id/statuses
          repository: ${{ github.repository }}
          deployment_id: ${{ fromJson(steps.deployment.outputs.data).id }}
          environment: ${{ steps.set-post-options.outputs.environment }}
          state: failure
          description: The deployment failed
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}      

        
    
    


      

